// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name AnsaCore
@_exported import AnsaCore
@_exported import AnsaShared
import Foundation
import PassKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class Logging {
  public init(level: AnsaCore.LogLevel = .none, log: @escaping (Swift.String, AnsaCore.LogLevel) -> Swift.Void = { message, level in print(message) })
  @objc deinit
}
public enum LogLevel {
  case none
  case debug
  case info
  case warning
  case error
  case verbose
  public static func == (a: AnsaCore.LogLevel, b: AnsaCore.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AnsaSdk {
  public static func initialize(publishableKey: Swift.String, clientSecretProvider: any AnsaCore.ClientSecretProvider, logging: AnsaCore.Logging = Logging())
  public static var shared: any AnsaCore.AnsaClient
  @objc deinit
}
public protocol ClientSecretProvider {
  #if compiler(>=5.3) && $AsyncAwait
  func provideClientSecret(ansaCustomerId: Swift.String) async -> Swift.String?
  #endif
}
public protocol MerchantManager {
  #if compiler(>=5.3) && $AsyncAwait
  func get(merchantId: Swift.String) async -> Swift.Result<AnsaCore.AnsaMerchant, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getBasisTheoryApiKey(merchantId: Swift.String) async -> Swift.Result<Swift.String, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getCardArtUrls() async -> Swift.Result<[Swift.String], AnsaCore.AnsaApiError>
  #endif
}
public struct AnsaMerchant : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let metadata: AnsaCore.AnsaMerchantMetadata
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnsaMerchantMetadata : Swift.Codable {
  public let appReloadConfiguration: AnsaCore.AppReloadConfiguration
  public let autoReloadConfiguration: AnsaCore.MerchantAutoReloadConfiguration
  public let omsProvider: Swift.String?
  public let paymentProcessor: Swift.String?
  public let promotions: AnsaCore.Promotions?
  public let userReferralConfiguration: AnsaCore.UserReferralConfiguration
  public let isTapToPayEnabled: Swift.Bool
  public let displayName: Swift.String
  public let giftCardConfiguration: AnsaCore.GiftCardConfiguration?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppReloadConfiguration : Swift.Codable {
  public let allowCustomAmount: Swift.Bool
  public let presetAmounts: [AnsaCore.PresetReloadAmounts]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PresetReloadAmounts : Swift.Codable {
  public let amount: Swift.Int
  public let id: Swift.String
  public let isMostPopular: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MerchantAutoReloadConfiguration : Swift.Codable {
  public let maximumAutoReloadAmount: Swift.Int
  public let minimumAutoReloadAmount: Swift.Int
  public let minimumAutoReloadThreshold: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Promotions : Swift.Codable {
  public let tiers: [AnsaCore.RewardTier]
  public let type: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RewardTier : Swift.Codable {
  public let minTransactionRequirement: Swift.Int
  public let promotionAmount: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserReferralConfiguration : Swift.Codable {
  public let enabled: Swift.Bool
  public let recipientCreditAmount: Swift.Int
  public let redemptionEvent: Swift.String
  public let redemptionThresholdAmount: Swift.Int
  public let senderCreditAmount: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GiftCardConfiguration : Swift.Codable {
  public let isEnabled: Swift.Bool
  public let square: AnsaCore.SquareGiftCardProviderConfig?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SquareGiftCardProviderConfig : Swift.Codable {
  public let redemptionLocationId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnsaCustomer : Swift.Codable {
  public let id: Swift.String
  public let balance: AnsaCore.CustomerBalance
  public let billingDetails: AnsaCore.CustomerBillingDetails
  public let email: Swift.String?
  public let merchantID: Swift.String
  public let phone: Swift.String?
  public let status: Swift.String
  public let isTapToPayEnabled: Swift.Bool
  public let autoReloadConfig: AnsaCore.CustomerAutoReloadConfiguration?
  public let paymentMethods: [AnsaCore.CustomerPaymentMethod]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerBalance : Swift.Codable {
  public let amount: Swift.Int64
  public let currency: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerBillingDetails : Swift.Codable {
  public let firstName: Swift.String
  public let lastName: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerAutoReloadConfiguration : Swift.Codable {
  public let enabled: Swift.Bool
  public let paymentMethodId: Swift.String?
  public let reloadAmount: Swift.Int?
  public let reloadThreshold: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerPaymentMethod : Swift.Codable {
  public let id: Swift.String
  public let type: AnsaCore.CustomerPaymentMethodType
  public init(id: Swift.String, type: AnsaCore.CustomerPaymentMethodType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CustomerPaymentMethodType : Swift.Codable {
  case applePay
  case googlePay
  case creditCard(AnsaCore.CustomerCreditCard)
  case unknown
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerCreditCard : Swift.Codable {
  public let brand: Swift.String
  public let fingerprint: Swift.String
  public let firstSix: Swift.String
  public let lastFour: Swift.String
  public init(brand: Swift.String, fingerprint: Swift.String, firstSix: Swift.String, lastFour: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerReloadConfiguration : Swift.Encodable {
  public let allowCustomAmount: Swift.Bool
  public let presetAmounts: [AnsaCore.CustomerPresetReloadAmounts]
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CustomerPresetReloadAmounts : Swift.Encodable {
  public let id: Swift.String
  public let amount: Swift.Int
  public let promotionAmount: Swift.Int
  public let isMostPopular: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum AddPaymentMethodType {
  case creditCard(token: Swift.String)
  case stripe(paymentMethodId: Swift.String)
  case square(cardNonce: Swift.String)
  case applePay(paymentData: AnsaCore.ApplePaymentData)
}
public protocol AnsaClient {
  var customer: any AnsaCore.CustomerManager { get }
  var merchant: any AnsaCore.MerchantManager { get }
  var ansaLogger: any AnsaShared.AnsaLogger { get }
  var isSandboxMode: Swift.Bool { get }
}
extension AnsaShared.Merchant {
  public func toSwiftStruct() -> AnsaCore.AnsaMerchant
}
extension AnsaShared.MerchantMetadata {
  public func toSwiftStruct() -> AnsaCore.AnsaMerchantMetadata
}
extension AnsaShared.AppReloadConfiguration {
  public func toSwiftStruct() -> AnsaCore.AppReloadConfiguration
}
extension AnsaShared.PresetReloadAmounts {
  public func toSwiftStruct() -> AnsaCore.PresetReloadAmounts
}
extension AnsaShared.MerchantAutoReloadConfiguration {
  public func toSwiftStruct() -> AnsaCore.MerchantAutoReloadConfiguration
}
extension AnsaShared.Promotions {
  public func toSwiftStruct() -> AnsaCore.Promotions
}
extension AnsaShared.RewardTier {
  public func toSwiftStruct() -> AnsaCore.RewardTier
}
extension AnsaShared.UserReferralConfiguration {
  public func toSwiftStruct() -> AnsaCore.UserReferralConfiguration
}
extension AnsaShared.GiftCardConfiguration {
  public func toSwiftStruct() -> AnsaCore.GiftCardConfiguration
}
extension AnsaShared.SquareGiftCardProviderConfig {
  public func toSwiftStruct() -> AnsaCore.SquareGiftCardProviderConfig
}
extension PassKit.PKPayment {
  public func ansaApplePaymentData() throws -> AnsaCore.ApplePaymentData
}
public struct ApplePaymentData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentDataApplePay : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentHeaderApplePay : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol CustomerManager {
  #if compiler(>=5.3) && $AsyncAwait
  func get(customerId: Swift.String) async -> Swift.Result<AnsaCore.AnsaCustomer, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getPaymentMethods(customerId: Swift.String) async -> Swift.Result<[AnsaCore.CustomerPaymentMethod], AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func addPaymentMethod(customerId: Swift.String, paymentMethodType: AnsaCore.AddPaymentMethodType, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaCore.CustomerPaymentMethod, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func deletePaymentMethod(customerId: Swift.String, paymentMethodId: Swift.String, idempotencyKey: Swift.String?) async -> Swift.Result<Swift.Void, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getAutoReloadConfiguration(customerId: Swift.String) async -> Swift.Result<AnsaCore.CustomerAutoReloadConfiguration, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func setAutoReloadConfiguration(request: AnsaShared.AutoReloadConfigurationRequest, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaCore.CustomerAutoReloadConfiguration, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func addBalance(request: AnsaShared.AddBalanceRequest, idempotencyKey: Swift.String?) async -> Swift.Result<any AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func useBalance(request: AnsaShared.UseBalanceRequest, idempotencyKey: Swift.String?) async -> Swift.Result<any AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getReloadConfig(customerId: Swift.String) async -> Swift.Result<AnsaCore.CustomerReloadConfiguration, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getTransactions(customerId: Swift.String, cursor: Swift.String?) async -> Swift.Result<AnsaShared.TransactionResult, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func createVirtualCard(customerId: Swift.String, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.VirtualCard, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func provisionVirtualCard(request: AnsaShared.ProvisioningRequest, idempotencyKey: Swift.String?) async -> Swift.Result<any AnsaShared.Provisioning, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func redeemGiftCard(request: AnsaShared.GiftCardRedemptionRequest, idempotencyKey: Swift.String?) async -> Swift.Result<AnsaShared.BalanceUpdateGiftCardRedemption, AnsaCore.AnsaApiError>
  #endif
}
extension AnsaCore.CustomerManager {
  #if compiler(>=5.3) && $AsyncAwait
  public func addPaymentMethod(customerId: Swift.String, paymentMethodType: AnsaCore.AddPaymentMethodType) async -> Swift.Result<AnsaCore.CustomerPaymentMethod, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func deletePaymentMethod(customerId: Swift.String, paymentMethodId: Swift.String) async -> Swift.Result<Swift.Void, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setAutoReloadConfiguration(request: AnsaShared.AutoReloadConfigurationRequest) async -> Swift.Result<AnsaCore.CustomerAutoReloadConfiguration, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func addBalance(request: AnsaShared.AddBalanceRequest) async -> Swift.Result<any AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func useBalance(request: AnsaShared.UseBalanceRequest) async -> Swift.Result<any AnsaShared.BalanceUpdate, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func createVirtualCard(customerId: Swift.String) async -> Swift.Result<AnsaShared.VirtualCard, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func provisionVirtualCard(request: AnsaShared.ProvisioningRequest) async -> Swift.Result<any AnsaShared.Provisioning, AnsaCore.AnsaApiError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func redeemGiftCard(request: AnsaShared.GiftCardRedemptionRequest) async -> Swift.Result<AnsaShared.BalanceUpdateGiftCardRedemption, AnsaCore.AnsaApiError>
  #endif
}
public struct AnsaApiError : Swift.Error, Foundation.LocalizedError {
  public let humanReadableMessage: Swift.String
  public let errorMessage: Swift.String
  public var errorDescription: Swift.String? {
    get
  }
}
extension AnsaCore.LogLevel : Swift.Equatable {}
extension AnsaCore.LogLevel : Swift.Hashable {}
